package templates

import (
  "fmt"

  "johtotimes.com/src/model"
  "johtotimes.com/src/constants"
)

templ CommentLoader(postID int64) {
  <div id="comment-wrapper" class="comment-wrapper">
    <h1>Comments</h1>
    @CreateCommentButton(postID)
    <div id="comments" class="comments"
         hx-get={ fmt.Sprintf("/comments/%d", postID) }
         hx-trigger="load"
         hx-target="#comments"
         hx-swap="outerHTML">
      <h1>Loading comments...</h1>
    </div>
  </div>
}

templ CreateCommentButton(postID int64) {
  <div class="button container"
       hx-get={ fmt.Sprintf("/newcomment/%d", postID) }
       hx-trigger="click"
       hx-swap="outerHTML">
    Leave a comment!
  </div>
}

templ CreateCommentTemplate(comment model.Comment, captchaID string, errorMessage ...string) {
  <form id="create-comment"
        hx-post={ fmt.Sprintf("/comments/%d", comment.PostID) }
        hx-target="#comment-wrapper">
    <div class="comment-form container">
      @CommentNameTemplate(comment.Name)
      @CommentContentTemplate(comment.Content)
      @CaptchaTemplate(captchaID)
      if len(errorMessage) > 0 {
        <div class="error-message">
          Please review your input:
          <ul>
          for _, error := range errorMessage {
            <li>
              { error }
            </li>
          }
          </ul>
        </div>
      }
      <button type="submit" class="button">Submit</button>
    </div>
  </form>
  <script>
    loadComments();
  </script>
}

templ CommentNameTemplate(value string) {
  <div class="form-field">
    <label>Name</label>
    <input name="name" type="text" value={ value } placeholder="Your name" />
  </div>
}

templ CommentContentTemplate(value string) {
  <div class="form-field">
    <label>Comment content</label>
    <textarea name="content" placeholder="Write a comment...">
      { value }
    </textarea>
  </div>
}

templ CaptchaTemplate(captchaID string) {
  <div id="captcha-wrapper" class="form-field">
    <label>Captcha</label>
      <img src={ fmt.Sprintf("/captcha/%s", captchaID) }
           id="captcha" alt="Captcha" />
    <div class="captcha-image">
      @AudioCaptchaTemplate(captchaID, false)
      <button hx-get={ fmt.Sprintf("/reloadcaptcha/%s", captchaID) }
              hx-target="#captcha-wrapper">↺</button>
    </div>
    <input type="hidden" name="captchaID" value={ captchaID } />
    Please type the Unown above:
    <input class="captcha-input" type="text" name="captcha" placeholder="Unown" />
  </div>
}

templ AudioCaptchaTemplate(captchaID string, hasAudio bool) {
  <button id="audio-captcha"
    hx-get={ fmt.Sprintf("/audiocaptcha/%s", captchaID) }
    hx-trigger="click"
    hx-target="this"
    hx-swap="outerHTML">
    if hasAudio {
      <audio
        id="audio-captcha-audio"
        src={ "/" + constants.AssetPath + "/audio/" + captchaID + ".mp3" }
        autoplay></audio>
    }
    ▶
  </button>
}

templ CommentListTemplate(comments []model.Comment) {
  <div id="comments" class="comments">
    for _, c := range comments {
      @commentTemplate(&c)
    }
  </div>
}

templ commentTemplate(comment *model.Comment) {
  <div class="comment container">
    <div class="comment-author">
      { comment.Name }
    </div>
  	// Mon Jan 2 15:04:05 -0700 MST 2006
    <div class="comment-date">
      { comment.Date.Format("15:04 Jan 2, 2006") }
    </div>
    { comment.Content }
  </div>
}
